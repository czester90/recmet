{
  "name": "grunt-php",
  "version": "1.0.0",
  "description": "Start a PHP-server",
  "keywords": [
    "gruntplugin",
    "php",
    "server",
    "webserver",
    "web-server",
    "http"
  ],
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "http://sindresorhus.com"
  },
  "repository": {
    "type": "git",
    "url": "sindresorhus/grunt-php"
  },
  "scripts": {
    "test": "grunt"
  },
  "dependencies": {
    "bin-version-check": "^0.1.0",
    "opn": "^0.1.1"
  },
  "devDependencies": {
    "grunt": "^0.4.1",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-simple-mocha": "^0.4.0",
    "request": "^2.36.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "license": "MIT",
  "files": [
    "tasks"
  ],
  "readme": "# grunt-php [![Build Status](https://travis-ci.org/sindresorhus/grunt-php.svg?branch=master)](https://travis-ci.org/sindresorhus/grunt-php)\n\n> Start a [PHP-server](http://php.net/manual/en/features.commandline.webserver.php)\n\nPretty much a drop-in replacement for [grunt-contrib-connect](https://github.com/gruntjs/grunt-contrib-connect). Useful for eg. running tests on a PHP project.\n\nUses the built-in server in PHP 5.4.0+.\n\n*Doesn't have a `middleware` option as grunt-contrib-connect does.*\n\n\n## Install\n\n```sh\n$ npm install --save-dev grunt-php\n```\n\n\n## Usage\n\n```js\nrequire('load-grunt-tasks')(grunt); // npm install --save-dev load-grunt-tasks\n\ngrunt.initConfig({\n\tphp: {\n\t\tdist: {\n\t\t\toptions: {\n\t\t\t\tport: 5000\n\t\t\t}\n\t\t}\n\t}\n});\n\ngrunt.registerTask('default', ['php']);\n```\n\n\n## Examples\n\n#### Start a persistent PHP-server and open in browser\n\n```js\ngrunt.initConfig({\n\tphp: {\n\t\ttest: {\n\t\t\toptions: {\n\t\t\t\tkeepalive: true,\n\t\t\t\topen: true\n\t\t\t}\n\t\t}\n\t}\n});\n\ngrunt.registerTask('test', ['php', 'mocha']);\n```\n\n#### Use it with [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch)\n\n```js\ngrunt.initConfig({\n\tphp: {\n\t\twatch: {}\n\t}\n});\n\ngrunt.registerTask('phpwatch', ['php:watch', 'watch']);\n```\n\n\n## Options\n\n### port\n\nType: `number`  \nDefault: `8000`\n\nThe port on which you want to access the webserver. Task will fail if the port is already in use.\n\n### hostname\n\nType: `string`  \nDefault: `'127.0.0.1'` *(usually same as `localhost`)*\n\nThe hostname the webserver will use.\n\nUse `0.0.0.0` if you want it to be accessible from the outside.\n\n### base\n\nType: `string`  \nDefault: `'.'`\n\nFrom which folder the webserver will be served. Defaults to the directory of the Gruntfile.\n\n### keepalive\n\nType: `boolean`  \nDefault: `false`\n\nKeep the server alive indefinitely. Any task specified after this will not run.\n\nThis option can also be enabled ad-hoc by running the task like `grunt php:targetname:keepalive`\n\n### open\n\nType: `boolean`  \nDefault: `false`\n\nOpen the server in the browser when the task is triggered.\n\n### router\n\nType: `string`  \n\nOptionally specify the path to a [router script](http://php.net/manual/en/features.commandline.webserver.php#example-380) that is run at the start of each HTTP request. If this script returns `false`, then the requested resource is returned as-is. Otherwise the script's output is returned to the browser.\n\nExample router script:\n\n```php\n<?php\n// router.php\nif (preg_match('/\\.(?:png|jpg|jpeg|gif)$/', $_SERVER[\"REQUEST_URI\"])) {\n\treturn false;    // serve the requested resource as-is\n} else {\n\techo \"<p>Thanks for using grunt-php :)</p>\";\n}\n?>\n```\n\n### bin\n\nType: `string`  \nDefault: `'php'`\n\nSpecify a custom path to the PHP binary. Useful if you have multiple versions of PHP installed.\n\n\n## License\n\nMIT Â© [Sindre Sorhus](http://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "_id": "grunt-php@1.0.0",
  "dist": {
    "shasum": "fa0eee5b54df8d26c3e54cf70b31e444ceceba64"
  },
  "_from": "grunt-php@",
  "_resolved": "https://registry.npmjs.org/grunt-php/-/grunt-php-1.0.0.tgz"
}
